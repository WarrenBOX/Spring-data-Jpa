复杂查询：
i. 借助接口中定义好的方法完成查询
    findOne(id): 根据id查询

ii. 根据jpql查询
    jpql：jpa query language （jpa查询语言）
    特点：语法或关键字与sql语句类似， 查询的是类和类中的属性

    ** 需要将jpql语句配置到接口方法上
    1. 特有的查询：需要在dao接口上配置方法
    2. 在新添加的方法上，使用注解的形式配置jpql查询语句
    3. 注解：@Query

iii: sql语句的查询
    1. 特有的查询：在dao接口上配置方法
    2. 在新添加的方法上，使用注解的形式配置jpql查询语句
    3. 注解：@Query
        value: jpql语句| sql语句
        nativeQuery：（是否使用本地查询） false （使用jpql语句查询）| true （使用本地，sql语句）

iv: 方法名称规则查询
    *是对jqpl查询，更加深入的一层封装，我们只需要安装springDataJpa提供的方法名称规则定义方法，不需要再配置jpql语句.
    * findBy开头： 代表查询
        对象中属性的名称（首字母大写）
    * 含义：根据属性名称进行查询


//------------------------------------------------------------------------------------------------------------

第一 Specification动态查询
* T findOne（Specification<T> spec）: 查询单个对象
* List<T> findAll(Specification<T> spec) : 查询列表

* //查询全部：分页
    //pageable：分页参数
    //返回值：分页pageBean (page: spring data jpa 提供）

*//查询列表
    //sort :排序参数
    //List<T> findAll(Specification<T> spec, Sort sort)

    long count(Specification<T> spec); 统计查询

*Specification：查询条件
    自定义我们自己的specification实现类
        实现方法
            //root: 查询的根对象 （查询的任何属性都可以从根对象中获取）
            // criteriaQuery ：顶层查询对象，自定义查询方式（了解，一般不用）
            // CriteriaBuilder： 查询的构造器，封装了很多查询的条件
            Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder cb) //封装查询条件


第二 多表之间的关系和操作多表的操作步骤


第三 完成多表操作
    i. 一对多操作
    ii. 多对多操作
